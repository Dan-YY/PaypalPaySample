//
//  DYPaypal.swift
//  PaypalPay
//
//  Created by Dan-YY on 2021-05-26.
//

import Foundation
import PayPalCheckout

@objc
protocol DYPaypalViewDelegate: NSObjectProtocol {
	@objc
	func onApproveCallback(response: AnyObject,
												 responseData: PayPalCheckout.OrderActionData,
												 error: NSError)

	@objc
	func onCancelCallback()

	@objc
	func onErrorCallback(error: NSError)

	@objc
	func delegateSample(string: NSString)
}

@objc
class DYPaypalView: UIView {

	@objc
	weak var delegate: DYPaypalViewDelegate?

	@objc
	override init(frame: CGRect) {
		super.init(frame: frame)
		commonInit()
	}

	required init?(coder: NSCoder) {
		fatalError("init(coder:) has not been implemented")
	}

	@objc
	func callDelegateSample(string: NSString) {
		delegate?.delegateSample(string: string)
	}

	private func commonInit() {
		setupCheckoutConfig()
		setupPaypalButton()
		configurePayPalCheckout()
	}

	private func setupCheckoutConfig() {
		let config = CheckoutConfig(
			clientID: "", //YOUR_CLIENT_ID,
				returnUrl: "",//"YOUR_RETURN_URL",
				environment: .sandbox
		)

		Checkout.set(config: config)

	}

	private func setupPaypalButton() {
		let paymentButton = PayPalButton()
		paymentButton.frame = CGRect(x: 0.0, y: 0.0, width: 200, height: 50)
		addSubview(paymentButton)

	}

	private func configurePayPalCheckout() {
		Checkout.setCreateOrderCallback { createOrderAction in
			let amount = PurchaseUnit.Amount(currencyCode: .usd, value: "10.00")
			let purchaseUnit = PurchaseUnit(amount: amount)
			let order = OrderRequest(intent: .capture, purchaseUnits: [purchaseUnit])

			createOrderAction.create(order: order)
		}

		Checkout.setOnApproveCallback { [weak self] approval in
			approval.actions.capture { [weak self] (response, error) in

				print("Order successfully captured: \(String(describing: response?.data))")

				guard let error = error as NSError? else {
					print("can't cast error to objc error, you can try using String to pass it to objc")
					return
				}

				guard let response = response else {
					print("can't cast data to objc OrderActionData, you can try using String to pass it to objc")
					return
				}

				let responseData = response.data
				self?.delegate?.onApproveCallback(response: response,
																					responseData: responseData,
																					error: error)
			}
			// Success message when funds capture successfully.
		}

		Checkout.setOnCancelCallback { [weak self] in
			self?.delegate?.onCancelCallback()
			print("setOnCancelCallback")
			// User has cancelled the payment experience
		}

		Checkout.setOnErrorCallback { [weak self] error in
			guard let error = error as? NSError else {
				print("can't cast error to objc error, you can try using String to pass it to objc")
				return
			}
			self?.delegate?.onErrorCallback(error: error)
			print("setOnErrorCallback", error)
			// Handle the error generated by the SDK
		}

	}

}
